import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:kobo_kobo/features/more/screens/bio_pin/biometerics_pin.dart';
import 'package:kobo_kobo/features/more/screens/biometerics_password/biometrics_password.dart';
import 'package:kobo_kobo/functional_util/assets.dart';
import 'package:kobo_kobo/functional_util/extensions/extensions.dart';
import 'package:kobo_kobo/ui_widgets/ui_widgets.dart';
import 'package:image_picker/image_picker.dart';
import 'package:file_picker/file_picker.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'dart:io';

import '../../navigation/navigation.dart';

class MoreHomePage extends StatefulWidget {
  const MoreHomePage({super.key});

  @override
  _MoreHomePageState createState() => _MoreHomePageState();
}

class _MoreHomePageState extends State<MoreHomePage> {
  bool biometricsForPassword = false;
  bool biometricsForTransactionPIN = false;
  File? _image;
  final ImagePicker _picker = ImagePicker();
  String? _selectedFilePath;

  @override
  void initState() {
    super.initState();
    _checkAndRequestPermissions();
  }

  @override
  Widget build(BuildContext context) {
    return AppScaffoldWidget(
      appBar: AppBar(
          // title: const Text('More'),
          ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(1.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildUserInfoCard(),
              const SizedBox(height: 16),
              ..._buildActionButtons(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildUserInfoCard() {
    return Card(
      elevation: 0,
      color: Colors.transparent,
      child: Padding(
        padding: const EdgeInsets.all(1.0),
        child: Column(
          children: [
            Row(
              children: [
                _image != null
                    ? ClipRRect(
                        borderRadius: BorderRadius.circular(30),
                        child: Image.file(
                          _image!,
                          width: 60,
                          height: 60,
                          fit: BoxFit.cover,
                        ),
                      )
                    : const HostedImage(
                        'https://picsum.photos/200/300',
                        width: 60,
                        height: 60,
                      ),
                const SizedBox(width: 26),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Hi, Temitope!',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      Text(
                        'Your Referral Code: 3219038',
                        style: context.textTheme.bodyMedium!.copyWith(
                          fontSize: Insets.dim_12.sp,
                          fontWeight: FontWeight.w400,
                          color: AppColors.black.withOpacity(0.8),
                        ),
                      ),
                      const SizedBox(height: 14),
                    ],
                  ),
                ),
              ],
            ),
            const Divider(height: 1, thickness: 1.0),
          ],
        ),
      ),
    );
  }

  final String noImgPng = noImg;
  final String fingerPng = fingerImg;
  final String notesPng = notesImg;
  final String empPng = acctstImg;

  List<Widget> _buildActionButtons() {
    final actions = [
      {
        'icon': Icons.person,
        'label': 'Change Profile Picture',
        'hasArrow': true,
      },
      {'icon': Icons.lock, 'label': 'Change Password', 'hasArrow': true},
      {'icon': noImgPng, 'label': 'Change Transaction PIN', 'hasArrow': true},
      {
        'icon': PhosphorIcons.hash(PhosphorIconsStyle.bold),
        'label': 'PIN Reset',
        'hasArrow': true
      },
      {'icon': notesPng, 'label': 'Account Statement', 'hasArrow': true},
      {'icon': empPng, 'label': 'Employment Details', 'hasArrow': true},
      {
        'icon': fingerPng,
        'label': 'Biometrics (For Password)',
        'isToggle': true
      },
      {
        'icon': fingerPng,
        'label': 'Biometrics (For Transaction PIN)',
        'isToggle': true
      },
      {
        'icon': PhosphorIcons.signOut(PhosphorIconsStyle.regular),
        'label': 'Logout',
        'hasArrow': true
      },
    ];

    return actions.map((action) {
      final bool isToggle = action['isToggle'] == true;
      final bool hasArrow = action['hasArrow'] == true;

      return Column(
        children: [
          const SizedBox(height: 8),
          ListTile(
            leading: Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: AppColors.appPrimaryButton.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: action['icon'] is IconData
                  ? Icon(
                      action['icon'] as IconData,
                      color: AppColors.appPrimaryButton,
                    )
                  : Image.asset(
                      action['icon'] as String,
                      height: 20,
                      width: 20,
                    ),
            ),
            title: Text(
              action['label'] as String,
              style: context.textTheme.bodyMedium!.copyWith(
                fontSize: Insets.dim_16.sp,
                fontWeight: FontWeight.w400,
                color: AppColors.black.withOpacity(0.9),
              ),
            ),
            trailing: isToggle
                ? Switch(
                    value: action['label'] == 'Biometrics (For Password)'
                        ? biometricsForPassword
                        : biometricsForTransactionPIN,
                    onChanged: (bool value) {
                      setState(() {
                        if (action['label'] == 'Biometrics (For Password)') {
                          biometricsForPassword = value;
                        } else {
                          biometricsForTransactionPIN = value;
                        }
                      });
                    },
                    activeColor: AppColors.appPrimaryButton,
                    activeTrackColor:
                        AppColors.appPrimaryButton.withOpacity(0.5),
                  )
                : hasArrow
                    ? Icon(
                        PhosphorIcons.caretRight(PhosphorIconsStyle.bold),
                        color: Colors.black,
                        size: 16,
                      )
                    : null,
            onTap: isToggle
                ? () {
                    if (action['label'] == 'Biometrics (For Password)') {
                      _navigateToBiometricsPassword(context);
                    } else if (action['label'] ==
                        'Biometrics (For Transaction PIN)') {
                      _navigateToBiometricsPin(context);
                    }
                  }
                : () {
                    if (action['label'] == 'Change Profile Picture') {
                      _showChangeAvatarModal(context);
                    } else if (action['label'] == 'Logout') {
                      _showLogoutConfirmationDialog(context);
                    } else if (action['label'] == 'PIN Reset') {
                      context.goNamed(AppRoutes.morePinResetNamed);
                    } else if (action['label'] == 'Account Statement') {
                      context.goNamed(AppRoutes.moreAccountStatementNamed);
                    } else if (action['label'] == 'Employment Details') {
                      context.goNamed(AppRoutes.moreEmploymentDetailsNamed);
                    } else if (action['label'] == 'Change Password') {
                      context.goNamed(AppRoutes.moreChangePasswordNamed);
                    } else if (action['label'] == 'Change Transaction PIN') {
                      context.goNamed(AppRoutes.moreChangeTransactionPinNamed);
                    }
                  },
          ),
          const SizedBox(height: 4),
          if (action != actions.last) const Divider(height: 1, thickness: 1),
        ],
      );
    }).toList();
  }

  void _showChangeAvatarModal(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: AppColors.white,
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 26),
              Text(
                'Change Avatar',
                style: context.textTheme.bodyMedium!.copyWith(
                  fontSize: Insets.dim_24.sp,
                  fontWeight: FontWeight.w400,
                  color: AppColors.black,
                ),
              ),
              const SizedBox(height: 26),
              ListTile(
                leading: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: AppColors.appPrimaryButton.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: LocalImage(
                    cameraImg,
                    height: 18.h,
                    width: 22.w,
                  ),
                ),
                title: Text(
                  'Take a photo',
                  style: context.textTheme.bodyMedium!.copyWith(
                    fontSize: Insets.dim_16.sp,
                    fontWeight: FontWeight.w400,
                    color: AppColors.black.withOpacity(0.8),
                  ),
                ),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: () async {
                  Navigator.pop(context);
                  await _takePicture();
                },
              ),
              ListTile(
                leading: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: AppColors.appPrimaryButton.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: LocalImage(
                    camImg,
                    height: 20.h,
                    width: 20.w,
                  ),
                ),
                title: Text(
                  'Select from gallery',
                  style: context.textTheme.bodyMedium!.copyWith(
                    fontSize: Insets.dim_16.sp,
                    fontWeight: FontWeight.w400,
                    color: AppColors.black.withOpacity(0.8),
                  ),
                ),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: () async {
                  Navigator.pop(context);
                  await _pickFile();
                },
              ),
            ],
          ),
        );
      },
    );
  }

  Future<void> _pickFile() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.image,
        allowMultiple: false,
      );

      if (result != null) {
        setState(() {
          _selectedFilePath = result.files.single.path;
          _image = File(_selectedFilePath!);
        });
        await _updateProfilePicture(_image!);
      }
    } catch (e) {
      print('Error picking image: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to pick image: $e')),
      );
    }
  }

  Future<void> _takePicture() async {
    final image = await _picker.pickImage(source: ImageSource.camera);
    if (image != null) {
      setState(() {
        _image = File(image.path);
      });
      await _updateProfilePicture(_image!);
    }
  }

  Future<void> _updateProfilePicture(File image) async {
    // Implement your update profile picture logic here.
    // You can upload the image to the server, etc.
  }

  Future<void> _checkAndRequestPermissions() async {
    PermissionStatus status = await Permission.camera.request();
    if (status.isDenied) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Camera permission is required.')),
      );
    }
  }

  void _navigateToBiometricsPassword(BuildContext context) {
    BiometricsPasswordArgs args = BiometricsPasswordArgs(
      routeTo: AppRoutes.home,
    );

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => BiometricsPassword(
          args: args,
          onPinEntered: (String pin) {
            // Handle the pin entered callback
            print('Pin entered: $pin');
          },
        ),
      ),
    );
  }

  void _navigateToBiometricsPin(BuildContext context) {
    BiometericsPinArgs args = BiometericsPinArgs(
      routeTo: AppRoutes.home,
    );

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => BiometericsPin(
          args: args,
          onPinEntered: (String pin) {
            // Handle the pin entered callback
            print('Pin entered: $pin');
          },
        ),
      ),
    );
  }

  Widget _buildTabButton(String title,
      {required VoidCallback onPressed, bool isActive = false}) {
    return Expanded(
      child: GestureDetector(
        onTap: onPressed,
        child: Container(
          height: Insets.dim_50.h,
          decoration: BoxDecoration(
            color: isActive ? AppColors.appPrimaryButton : Colors.transparent,
            border: Border.all(color: AppColors.appPrimaryButton),
            borderRadius: Corners.smBorder,
          ),
          padding: EdgeInsets.symmetric(
            horizontal: Insets.dim_12.w,
            vertical: Insets.dim_8.h,
          ),
          child: Center(
            child: Text(
              title,
              style: Theme.of(context).textTheme.bodySmall!.copyWith(
                    fontWeight: FontWeight.w500,
                    fontSize: Insets.dim_16.sp,
                    color:
                        isActive ? AppColors.white : AppColors.appPrimaryButton,
                  ),
            ),
          ),
        ),
      ),
    );
  }

  void _showLogoutConfirmationDialog(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: AppColors.white,
      builder: (BuildContext context) {
        // Initialize the active states here instead of inside the modal
        bool isCancelActive = false;
        bool isContinueActive = false;

        return StatefulBuilder(
          builder: (context, setModalState) {
            return Container(
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 26),
                  Text(
                    'Are you sure?',
                    style: context.textTheme.bodyMedium!.copyWith(
                      fontSize: Insets.dim_22.sp,
                      fontWeight: FontWeight.w500,
                      color: AppColors.black.withOpacity(0.8),
                    ),
                  ),
                  const SizedBox(height: 26),
                  SizedBox(
                    // height: 50.h,
                    child: _buildTabButton(
                      'Logout',
                      onPressed: () {
                        setModalState(() {
                          isCancelActive = false;
                          isContinueActive = true;
                        });
                        AppNavigator.of(context).push(AppRoutes.login);
                      },
                      isActive: isContinueActive,
                    ),
                  ),
                  const SizedBox(height: 16),
                  SizedBox(
                    // height: 50.h,
                    child: _buildTabButton(
                      'Cancel',
                      onPressed: () {
                        setModalState(() {
                          isCancelActive = true;
                          isContinueActive = false;
                        });
                        Future.delayed(const Duration(milliseconds: 200), () {
                          AppNavigator.of(context).pop();
                        });
                      },
                      isActive: isCancelActive,
                    ),
                  )
                ],
              ),
            );
          },
        );
      },
    );
  }
}
